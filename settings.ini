# info related to IC generation

IC generator = basic

template file = sc1_crystal.dat     # file (Gadget-2 format) containing homogeneous particle template
tiling factor = 16                  # number of times the template shall be repeated in each direction
                                    # total number of particles will be N_template * (tiling factor)^3

Tk file = class_tk.dat              # file containing tabulated transfer functions (densities and velocities)
                                    # at initial redshift (ASCII file in CLASS format assumed)
baryon treatment = blend            # possible choices are "ignore", "sample", "blend" (default) and "hybrid"

seed = 12345                        # initial seed for random number generator
correct displacement = yes          # if "yes" the IC generator will try to fold the template pattern
                                    # into the convolution kernel of the displacement field
k-domain = sphere                   # possible choices are "sphere" or "cube"


# primordial power spectrum

k_pivot = 0.05                      # in units of inverse Mpc (not h/Mpc!)
A_s = 2.215e-9
n_s = 0.9619


# cosmological parameters

h            = 0.67556               # 0.67556
omega_b      = 0.022032              # 0.022032
omega_cdm    = 0.12038               # 0.12038
Omega_Lambda = 2.                    # only read if f(R) gravity selected; if > 1, sets Omega_Lambda = 1 - Omega_m - Omega_rad
T_cmb        = 2.7255                # in units of K (2.7255)
N_ur         = 3.046                 # 3.046


# simulation settings

initial redshift    = 100.0
boxsize             = 320.0         # in units of Mpc/h
Ngrid               = 64
Courant factor      = 48.0
time step limit     = .04        # in units of Hubble time
gravity theory      = fr         # possible choices are "GR" or "Newton" or "f(R)"
vector method       = elliptic   # possible choices are "parabolic" or "elliptic"



# f(R) settings

background file             = background.txt   # file containing the background (tau a H R)
f(R) type                   = HS               # f(R) = a*R^n : RN -- Pass a, n
                                               # f(R) = a*(R/a)^(1 + delta) - R with delta << 1 : DE -- Pass a, delta
                                               # f(R) = Hu-Sawicki (arXiv:0705.1158): HS -- See FR_tools for details, example: 1., 10., 1.
f(R) parameters             = 1., 10., 1.      # Parameters for f(R) model
f(R) epsilon background     = .1
f(R) epsilon fields         = .1
f(R) target precision       = 1.E-6  # Target relative precision for the conversion xi --> deltaR
f(R) count max              = 1.E+5  # Max steps to attempt in the conversion xi --> deltaR
f(R) relaxation error       = 1.E-6  # Relaxation error per grid point (this number will be multiplied by N_grid**3)
S0i mode                    = 2      # 1: construct full source term, with explicit gradients; else: only matter
back to GR                  = 0      # 0: to have f(R), else: kill every term except GR // TODO: check interaction with background_only
                                     # NB: the background will still be f(R)!
check fields                = 1      # perform field checks (!=0) or not (0)
check pause                 = 0      # Pause after each check-step
background only             = 0      # Only background evolution
background trace            = 1      # Use trace equation to evolve background instead of Friedmann equation
background initial redshift = 100    # Only if background_only flag active
background final redshift   = 0     # Only if background_only flag active
lcdm background             = 0      # background evolution is LCDM -- TODO: to speed up tests
switch to f(R) redshift     = -10    # redshift at which the background starts being computed exactly, not lcdm. Only active if lcdm background flagged
quasi-static                = 1      # Quasi-static approximation
check redshift              = -1     # redshift at which field checks start. No checks before then
CYCLE_INFO_INTERVAL         = 1     # Output info each CYCLE_INFO_INTERVAL cycles
BACKGROUND_NUMPTS           = 2000     # Output info on background file each BACKGROUND_NUMPTS cycles (Only for background only!)


# output

output path           = output/
# generic file base   = lcdm
# snapshot file base  = lcdm_snap
# Pk file base        = lcdm_pk
Pk bins               = 1024
snapshot redshifts    =
snapshot outputs      =
Pk redshifts          = 70, 60, 50, 40, 30, 20, 10, 5, 2, 1, 0
Pk outputs            = phi, xi, deltaR, zeta

# additional parameters used by CLASS (in order to generate the transfer functions)

output              = mPk, dTk, vTk
gauge               = Newtonian
P_k_ini type        = analytic_Pk
P_k_max_h/Mpc       = 192           # has to be large enough (otherwise IC generator may crash)
z_pk                = 80            # should be equal to initial redshift
root                = class_
background_verbose  = 1
spectra_verbose     = 1
output_verbose      = 1

hibernation redshifts       =
hibernation wallclock limit = -3
hibernation path            = ./hib/
hibernation file base       = hib
