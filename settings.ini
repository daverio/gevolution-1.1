#==================== info related to IC generation ====================#
IC generator = basic

template file = sc1_crystal.dat     # file (Gadget-2 format) containing homogeneous particle template
tiling factor =                     # number of times the template shall be repeated in each direction
                                    # total number of particles will be N_template * (tiling factor)^3
Tk file = class_tk.dat              # file containing tabulated transfer functions (densities and velocities)
                                    # at initial redshift (ASCII file in CLASS format assumed)
baryon treatment = blend            # possible choices are "ignore", "sample", "blend" (default) and "hybrid"

seed = 12345                        # initial seed for random number generator
correct displacement = yes          # if "yes" the IC generator will try to fold the template pattern
                                    # into the convolution kernel of the displacement field
k-domain = sphere                   # possible choices are "sphere" or "cube"

#==================== primordial power spectrum ====================#
k_pivot = 0.05                      # in units of inverse Mpc (not h/Mpc!)
A_s     = 2.215e-9
n_s     = 0.9619

#==================== cosmological parameters ====================#
h            = 0.704               # 0.67556
omega_b      = 0.02260              # 0.022032
omega_cdm    = 0.1122               # 0.12038
Omega_Lambda = 2.                    # only read if f(R) gravity selected; if > 1, sets Omega_Lambda = 1 - Omega_m - Omega_rad (not in Hu-Sawicki!)
T_cmb        = 2.7255                # in units of K (2.7255)
N_ur         = 3.046                 # 3.046

#==================== simulation settings ====================#
initial redshift     = 100.0
boxsize              = 64.0      # in units of Mpc/h
generic file base    =
Ngrid                = 32
f(R) parameters      = 1., 1.E-6, 1.  # Parameters for f(R) model
relaxation method    = 1        # 1: single layer, 2: multigrid, 3: FMG
gravity theory       = gr         # possible choices are "GR" or "Newton" or "fR"
truncate relaxation  = -1
truncation threshold = 0.01
relaxation error     = 1.E-7   #
Newtonian f(R)       = 0      # Newtonian (!=0) or relativistic (=0) f(R)
Courant factor      = 48.0
time step limit     = .04        # in units of Hubble time
vector method       = elliptic   # possible choices are "parabolic" or "elliptic"
check fields        = 1          # perform field checks (!=0) or not (0)
check precision     = 6          # perform field checks (!=0) or not (0)
CYCLE_INFO_INTERVAL = 25         # Output info each CYCLE_INFO_INTERVAL cycles
BACKGROUND_NUMPTS   = 350        # Output info on background file each BACKGROUND_NUMPTS cycles (For background only!)
                                 # If negative, prints each time step

#==================== f(R) settings ====================#
# f(R) type and parameters: see fR_tools.hpp for details
# types: RN, HS (Hu-Sawicki), DE
#
# ///////////// FR_TYPE_RN
#  f(R) = a * R^n = R * (R/(b*Ra))^(n-1)
#  For convenience pass as arguments: b, n
#  where Ra := 8piG * rho_0 (= 8piG in code units)
#  then compute a = (b*Ra)^(1-n)
#
# ///////////// FR_TYPE_DELTA
#  f(R) = a * R^(1+delta) - R
#  Specify fR0 and delta, then
#  a = (1 + fR0) / (1 + delta) / R0**delta
#
#
# ///////////// FR_TYPE_HU_SAWICKI
#  Hu-Sawicki Model: arXiv:0705.1158 -- See paper for 2
#  m2 := m^2 (comparison between these values and the nomenclature of the original paper)
#  f(R) = -m2 * c1 * (R/m2)^n / (1 + c2*(R/m2)^n)
#  In settings.ini:
#  params[0] = m^2 is given in units of (matter energy density today) * 8piG / 3.
#  params[1] = |fR0| (<< 1)
#  params[2] = n

f(R) model                  = HS
background file             = background.txt   # file containing the background (tau a H R)
f(R) epsilon background     = .1
f(R) epsilon fields         = .1
quasi-static                = 1      # Quasi-static approximation
xi_Hubble                   = 1      # H * dot_xi in trace equation or not
GR curvature                = 0      # 0: normal f(R) evolution; !=0: deltaR = eightpiG_deltaT
f(R) target precision       = 1.E-7  # Target relative precision for the conversion xi --> deltaR
f(R) count max              = 1.E+5  # Max steps to attempt in the conversion xi --> deltaR
check pause                 = 0      # Pause after each check-step
background only             = 0      # Only background evolution
background final redshift   = 0      # Only if background_only flag active
lcdm background             = 1      # background evolution is LCDM -- TODO: to speed up tests
switch to f(R) redshift     = -1     # redshift at which the background starts being computed exactly, not lcdm.
                                     # Only active if lcdm background is NOT flagged
check redshift              = -1     # redshift at which field checks start. No checks before then

#==================== Multigrid and relaxation ====================#
red black                  = 1        # Red-black scheme (!=0) or not (0)
pre-smoothing              = 10       # pre-smoothing steps during multigrid methods // TODO Check
post-smoothing             = 10       # post-smoothing steps during multigrid methods // TODO Check
overrelaxation coefficient = 1.       # must be between 0 and 2 (excluding extremal values). Defaults to 1.
multigrid shape            = v        # V or W
multigrid n-grids          = 100      #
multigrid n-cycles         = 4        # See Numerical Recipes (2nd Ed.) p. 875
check shape                = 0        # TODO: Remove after debugging
restrict mode              = x        # xi or deltaR

#==================== output ====================#
output path          = output/
# snapshot file base =
# Pk file base       =
Pk bins              = 1024
snapshot redshifts   =
snapshot outputs     =
Pk redshifts         = 0.
Pk outputs           = phi, chi, deltaR, zeta, xi, rho, deltaT, phi_effective, Bi, phi_ddot
check outputs        = phi, chi, deltaR, zeta, xi, deltaT

#==================== additional parameters used by CLASS (in order to generate the transfer functions) ====================#
output             = mPk, dTk, vTk
gauge              = Newtonian
P_k_ini type       = analytic_Pk
P_k_max_h/Mpc      = 192           # has to be large enough (otherwise IC generator may crash)
z_pk               = 100            # should be equal to initial redshift
root               = class_
background_verbose = 1
spectra_verbose    = 1
output_verbose     = 1

#==================== hibernation ====================#
hibernation redshifts       =
hibernation wallclock limit = -3
hibernation path            = ./hib/
hibernation file base       = hib
particle save mode          = gadget2   # gadget2 or hdf5
